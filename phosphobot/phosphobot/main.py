"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                          ü§ñ EduBotics Hauptprogramm ü§ñ                      ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Ein benutzerfreundliches Robotik-Steuerungssystem f√ºr Bildungszwecke        ‚ïë
‚ïë  Entwickelt f√ºr Sch√ºler und Lehrkr√§fte                                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""

# ============================================================================
# SCHRITT 1: GRUNDLEGENDE IMPORTS UND SYSTEMKONFIGURATION
# ============================================================================

from asyncio import CancelledError
from loguru import logger

logger.info("üöÄ Starte EduBotics System...")

import sys

print(f"üìù System-Zeichenkodierung: {sys.stdout.encoding}")

import io

# ============================================================================
# SCHRITT 2: WINDOWS-KOMPATIBILIT√ÑT (Zeichenkodierung)
# ============================================================================

# üîß Behebe Kodierungsprobleme auf Windows-Systemen
if sys.platform.startswith("win") and sys.stdout.encoding.lower() != "utf-8":
    try:
        sys.stdout = io.TextIOWrapper(
            sys.stdout.buffer, encoding="utf-8", errors="replace"
        )
        sys.stderr = io.TextIOWrapper(
            sys.stderr.buffer, encoding="utf-8", errors="replace"
        )
        logger.info("‚úÖ Windows-Zeichenkodierung erfolgreich angepasst")
    except Exception:
        pass  # Ignoriere Fehler, falls bereits konfiguriert


from rich import print

from phosphobot import __version__

_splash_shown = False


def print_phospho_splash():
    """
    üé® Zeigt den bunten EduBotics Willkommensbildschirm
    Wird nur einmal beim Start angezeigt
    """
    global _splash_shown
    if not _splash_shown:
        print(
            f"""[cyan]
    
[bold blue]‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó[/bold blue]
[bold blue]‚ïë[/bold blue]                                                                              [bold blue]‚ïë[/bold blue]
[bold blue]‚ïë[/bold blue]     [bold magenta]‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó[/bold magenta]     [bold blue]‚ïë[/bold blue]  
[bold blue]‚ïë[/bold blue]     [bold magenta]‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù[/bold magenta]     [bold blue]‚ïë[/bold blue]  
[bold blue]‚ïë[/bold blue]     [bold magenta]‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó[/bold magenta]     [bold blue]‚ïë[/bold blue]  
[bold blue]‚ïë[/bold blue]     [bold magenta]‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë[/bold magenta]     [bold blue]‚ïë[/bold blue]  
[bold blue]‚ïë[/bold blue]     [bold magenta]‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë[/bold magenta]     [bold blue]‚ïë[/bold blue]  
[bold blue]‚ïë[/bold blue]     [bold magenta]‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù[/bold magenta]     [bold blue]‚ïë[/bold blue]  
[bold blue]‚ïë[/bold blue]                                                                              [bold blue]‚ïë[/bold blue]
[bold blue]‚ïë[/bold blue]                    [bold yellow]ü§ñ Robotik-Bildungssystem üéì[/bold yellow]                       [bold blue]‚ïë[/bold blue]               
[bold blue]‚ïë[/bold blue]                                                                              [bold blue]‚ïë[/bold blue]
[bold blue]‚ïë[/bold blue]                          [bold white]Version {__version__:^10}[/bold white]                         [bold blue]‚ïë[/bold blue]                   
[bold blue]‚ïë[/bold blue]                      [dim]Copyright ¬© 2025 EduBotics Team[/dim]                     [bold blue]‚ïë[/bold blue]               
[bold blue]‚ïë[/bold blue]                        [dim]Powered by phospho technology[/dim]                    [bold blue]‚ïë[/bold blue]              
[bold blue]‚ïë[/bold blue]                                                                              [bold blue]‚ïë[/bold blue]
[bold blue]‚ïë[/bold blue]               [bold green]‚ú® Willkommen zur Zukunft der Robotik! ‚ú®[/bold green]                  [bold blue]‚ïë[/bold blue]
[bold blue]‚ïë[/bold blue]                                                                              [bold blue]‚ïë[/bold blue]
[bold blue]‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù[/bold blue]
    
            [/cyan]"""
        )
        _splash_shown = True


print_phospho_splash()

import platform
import threading

from phosphobot.utils import fetch_latest_brew_version

_version_check_started = False


def fetch_latest_version():
    """
    üîç √úberpr√ºft, ob eine neue Version von EduBotics verf√ºgbar ist
    L√§uft im Hintergrund, um den Start nicht zu verlangsamen
    """
    try:
        version = fetch_latest_brew_version(fail_silently=True)
        if version != "unknown" and (version != "v" + __version__):
            # üçé macOS Update-Anweisung
            if platform.system() == "Darwin":
                logger.warning(
                    f"‚ú® Neue Version {version} von EduBotics verf√ºgbar! \n"
                    f"üì¶ Aktualisieren mit: \n"
                    f"   brew update && brew upgrade EduBotics"
                )
            # üêß Linux Update-Anweisung
            elif platform.system() == "Linux":
                logger.warning(
                    f"‚ú® Neue Version {version} von EduBotics verf√ºgbar! \n"
                    f"üì¶ Aktualisieren mit: \n"
                    f"   sudo apt update && sudo apt upgrade EduBotics"
                )
            # ü™ü Windows Update-Anweisung
            else:
                logger.warning(
                    f"‚ú® Neue Version {version} von EduBotics verf√ºgbar! \n"
                    f"üì¶ Bitte besuche: https://docs.edubotics.ai/installation#windows"
                )
    except Exception:
        pass


if not _version_check_started:
    thread = threading.Thread(target=fetch_latest_version, daemon=True)
    thread.start()
    _version_check_started = True

import socket
import time
from typing import Annotated

import typer
import uvicorn
from phosphobot.configs import config
from phosphobot.types import SimulationMode


def init_telemetry() -> None:
    """
    üìä Initialisiert die automatische Fehlerberichterstattung
    Hilft uns, EduBotics zu verbessern!
    """
    from phosphobot.sentry import init_sentry

    init_sentry()


def get_local_ip() -> str:
    """
    üåê Ermittelt die lokale IP-Adresse des Servers
    N√ºtzlich f√ºr Netzwerkverbindungen im Klassenzimmer
    """
    try:
        # Erstelle einen tempor√§ren Socket zur IP-Ermittlung
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))  # Google DNS (sendet keine echten Daten)
            server_ip = s.getsockname()[0]
    except Exception:
        server_ip = "localhost"
    return server_ip


# ============================================================================
# KOMMANDOZEILEN-INTERFACE (CLI)
# ============================================================================

cli = typer.Typer(
    no_args_is_help=True, 
    rich_markup_mode="rich",
    help="ü§ñ EduBotics - Das Robotik-Steuerungssystem f√ºr Bildung"
)


def version_callback(value: bool):
    """üìå Zeigt die Version und beendet das Programm"""
    if value:
        print(f"ü§ñ EduBotics Version {__version__}")
        raise typer.Exit()


@cli.callback()
def main(
    version: Annotated[
        bool,
        typer.Option(
            "--version",
            "-v",
            help="üìå Zeige die EduBotics Version",
            callback=version_callback,
        ),
    ] = False,
):
    """
    ü§ñ EduBotics - Ein Robotik-Teleoperation-Server f√ºr Bildungszwecke
    
    Perfekt f√ºr Sch√ºler und Lehrkr√§fte zum Lernen und Experimentieren!
    """
    pass


# ============================================================================
# INFO-KOMMANDO: ZEIGE SYSTEM-INFORMATIONEN
# ============================================================================

@cli.command()
def info(
    opencv: Annotated[bool, typer.Option(help="üì∑ Zeige OpenCV Details")] = False,
    servos: Annotated[bool, typer.Option(help="‚öôÔ∏è Zeige Servo-Motor Informationen")] = False,
):
    """
    üìã Zeigt alle verf√ºgbaren Anschl√ºsse und Kameras
    
    Sehr n√ºtzlich f√ºr die Fehlersuche und Systemdiagnose!
    """
    import serial.tools.list_ports

    # üîå Sammle Informationen √ºber serielle Ports
    ports = serial.tools.list_ports.comports()
    pid_list = [port.pid for port in ports]
    serial_numbers = [port.serial_number for port in ports]

    print("\n" + "‚ïê"*80)
    print("[bold cyan]        üìä EDUBOTICS SYSTEM-INFORMATIONEN üìä[/bold cyan]")
    print("‚ïê"*80 + "\n")
    
    print(f"[bold green]üîå Verf√ºgbare Roboter-Anschl√ºsse:[/bold green]")
    if ports:
        for i, port in enumerate(ports, 1):
            print(f"   {i}. [bold white]{port.device}[/bold white] - {port.description}")
    else:
        print("   [red]‚ùå Keine Roboter-Anschl√ºsse gefunden[/red]")
        print("   [dim]üí° Stelle sicher, dass dein Roboter angeschlossen ist[/dim]")
    
    print(f"\n[bold green]üè∑Ô∏è Ger√§te-Seriennummern:[/bold green]")
    if serial_numbers and any(serial_numbers):
        for i, sn in enumerate(serial_numbers, 1):
            if sn:
                print(f"   {i}. [bold white]{sn}[/bold white]")
    else:
        print("   [yellow]‚ö†Ô∏è Keine Seriennummern gefunden[/yellow]")
        
    print(f"\n[bold green]üÜî Produkt-IDs (PIDs):[/bold green]")
    if pid_list and any(pid_list):
        for i, pid in enumerate(pid_list, 1):
            if pid:
                print(f"   {i}. [bold white]{pid}[/bold white]")
    else:
        print("   [yellow]‚ö†Ô∏è Keine PIDs gefunden[/yellow]")
    
    print("\n" + "‚îÄ"*80 + "\n")

    # üì∑ Kamera-Informationen
    import cv2
    from phosphobot.camera import get_all_cameras

    print("[bold blue]üì∑ KAMERA-STATUS üì∑[/bold blue]")
    print("‚îÄ"*80)
    print("[yellow]‚è≥ Kameras werden √ºberpr√ºft... Bitte warten...[/yellow]")
    cameras = get_all_cameras()
    time.sleep(0.5)
    cameras_status = cameras.status().model_dump_json(indent=4)
    cameras.stop()
    print(f"\n[green]‚úÖ Kamera-Konfiguration:[/green]")
    print(f"[dim]{cameras_status}[/dim]")

    # OpenCV Details (optional)
    if opencv:
        print("\n" + "‚ïê"*80)
        print("[bold cyan]        üì∑ OPENCV BUILD-INFORMATIONEN üì∑[/bold cyan]")
        print("‚ïê"*80)
        print("[dim][yellow]‚ö†Ô∏è F√ºr Experten: Technische OpenCV-Details[/yellow][/dim]\n")
        print(cv2.getBuildInformation())

    # Servo-Motor Diagnose (optional)
    if servos:
        from phosphobot.hardware.motors.feetech import dump_servo_states_to_file
        from phosphobot.utils import get_home_app_path

        print("\n" + "‚ïê"*80)
        print("[bold cyan]        ‚öôÔ∏è SERVO-MOTOR DIAGNOSE ‚öôÔ∏è[/bold cyan]")
        print("‚ïê"*80)
        print("[yellow]üîç Analysiere Servo-Motoren... Dies kann etwas dauern...[/yellow]\n")
        
        # Diagnose f√ºr SO-100 Servos
        for port in ports:
            if port.pid == 21971:
                print(f"   [blue]üîç Untersuche Servo an {port.device}...[/blue]")
                dump_servo_states_to_file(
                    get_home_app_path() / f"servo_states_{port.device}.csv",
                    port.device,
                )
                print(f"   [green]‚úÖ Diagnose gespeichert![/green]")

    raise typer.Exit()


def is_port_in_use(port: int, host: str) -> bool:
    """
    üîç √úberpr√ºft, ob ein Port bereits verwendet wird
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            s.bind((host, port))
            return False
        except OSError:
            return True


# ============================================================================
# UPDATE-KOMMANDO: ZEIGE UPDATE-INFORMATIONEN
# ============================================================================

@cli.command()
def update():
    """
    üì¶ Zeigt Informationen zur Software-Aktualisierung
    
    Halte EduBotics immer auf dem neuesten Stand!
    """
    print("\n" + "‚ïê"*80)
    print("[bold cyan]        üì¶ EDUBOTICS UPDATE-ANLEITUNG üì¶[/bold cyan]")
    print("‚ïê"*80 + "\n")
    
    print("[bold yellow]üöÄ Halte dein EduBotics System aktuell![/bold yellow]\n")
    
    if platform.system() == "Darwin":
        print("üçé [bold cyan]macOS Update:[/bold cyan]")
        print("   F√ºhre folgenden Befehl im Terminal aus:")
        print("   [green]brew update && brew upgrade phosphobot[/green]")
    elif platform.system() == "Linux":
        print("üêß [bold cyan]Linux Update:[/bold cyan]")
        print("   F√ºhre folgenden Befehl im Terminal aus:")
        print("   [green]sudo apt update && sudo apt upgrade phosphobot[/green]")
    else:
        print("ü™ü [bold cyan]Windows Update:[/bold cyan]")
        print("   Bitte besuche die Dokumentation:")
        print("   [green]https://docs.edubotics.ai/installation#windows[/green]")
    
    print("\n" + "‚ïê"*80 + "\n")


# ============================================================================
# RUN-KOMMANDO: HAUPTFUNKTION ZUM STARTEN DES SERVERS
# ============================================================================

@cli.command()
def run(
    host: Annotated[str, typer.Option(help="üåê Host-Adresse f√ºr den Server")] = "0.0.0.0",
    port: Annotated[int, typer.Option(help="üîå Port f√ºr den Server")] = 80,
    simulation: Annotated[
        SimulationMode,
        typer.Option(
            help="üéÆ Simulationsmodus (headless oder gui)",
        ),
    ] = SimulationMode.headless,
    only_simulation: Annotated[
        bool, typer.Option(help="üéÆ Nur Simulation ausf√ºhren (ohne Hardware)")
    ] = False,
    simulate_cameras: Annotated[
        bool,
        typer.Option(help="üì∑ Simuliere virtuelle Kameras"),
    ] = False,
    realsense: Annotated[
        bool,
        typer.Option(help="üìπ RealSense-Kamera aktivieren"),
    ] = True,
    can: Annotated[
        bool,
        typer.Option(
            help="üîó CAN-Bus Scanning aktivieren",
        ),
    ] = True,
    cameras: Annotated[
        bool,
        typer.Option(
            help="üì∑ Kameras aktivieren",
        ),
    ] = True,
    max_opencv_index: Annotated[
        int,
        typer.Option(
            help="üî¢ Maximaler OpenCV-Index f√ºr Kamerasuche",
        ),
    ] = 10,
    reload: Annotated[
        bool,
        typer.Option(
            help="üîÑ (Entwickler) Server bei Datei√§nderungen neu laden"
        ),
    ] = False,
    profile: Annotated[
        bool,
        typer.Option(
            help="üìä (Entwickler) Performance-Profiling aktivieren"
        ),
    ] = False,
    crash_telemetry: Annotated[
        bool,
        typer.Option(help="üì° Absturz-Berichte aktivieren"),
    ] = True,
    usage_telemetry: Annotated[
        bool,
        typer.Option(help="üìä Nutzungsstatistiken aktivieren"),
    ] = True,
    telemetry: Annotated[
        bool,
        typer.Option(help="üì° Alle Telemetrie aktivieren"),
    ] = True,
):
    """
    üöÄ [green]Startet das EduBotics Dashboard und den API-Server[/green]
    
    Steuere deinen Roboter und nimm Datens√§tze auf!
    """
    
    print("\n" + "‚ïê"*80)
    print("[bold cyan]        üöÄ EDUBOTICS SERVER WIRD GESTARTET üöÄ[/bold cyan]")
    print("‚ïê"*80)
    print("\n[yellow]‚è≥ Bitte warten... Das System wird initialisiert...[/yellow]")
    print("[dim]üí° Dies kann ein paar Sekunden dauern[/dim]\n")

    # Konfiguration setzen
    config.SIM_MODE = simulation
    config.ONLY_SIMULATION = only_simulation
    config.SIMULATE_CAMERAS = simulate_cameras
    config.ENABLE_REALSENSE = realsense
    config.ENABLE_CAMERAS = cameras
    config.PORT = port
    config.PROFILE = profile
    config.CRASH_TELEMETRY = crash_telemetry
    config.USAGE_TELEMETRY = usage_telemetry
    config.ENABLE_CAN = can
    config.MAX_OPENCV_INDEX = max_opencv_index

    if not telemetry:
        config.CRASH_TELEMETRY = False
        config.USAGE_TELEMETRY = False
        print("üì° Telemetrie deaktiviert")

    # Server mit Port-Retry-Logik starten
    ports = [port]
    if port == 80:
        ports += list(range(8020, 8040))  # 8020-8039 als Backup-Ports

    success = False
    for current_port in ports:
        if is_port_in_use(current_port, host):
            logger.warning(f"‚ö†Ô∏è Port {current_port} ist belegt. Versuche n√§chsten Port...")
            continue

        try:
            # Aktualisiere Konfiguration mit aktuellem Port
            config.PORT = current_port
            
            # Sch√∂ne Anzeige der Server-URLs f√ºr Sch√ºler
            local_url = f"http://localhost:{current_port}"
            network_url = f"http://{get_local_ip()}:{current_port}"
            
            print("\n" + "[bold blue]‚ïî" + "‚ïê"*88 + "‚ïó[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold cyan]üéâ EDUBOTICS SERVER ERFOLGREICH GESTARTET! üéâ[/bold cyan]".center(98) + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ï†" + "‚ïê"*88 + "‚ï£[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold white]üåê Dein EduBotics Dashboard ist jetzt verf√ºgbar:[/bold white]".center(98) + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            
            # Lokaler Zugang mit sch√∂ner Box
            print("[bold blue]‚ïë[/bold blue]" + "[bold green]‚îå‚îÄ üì± F√úR DIESEN COMPUTER ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê[/bold green]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + f"[bold green]‚îÇ[/bold green]   [bold yellow]üîó {local_url:<60}[/bold yellow] [bold green]‚îÇ[/bold green]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold green]‚îÇ[/bold green]   [dim]üí° Klicke auf den Link oder kopiere ihn in deinen Browser[/dim]              [bold green]‚îÇ[/bold green]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold green]‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò[/bold green]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            
            # Netzwerk-Zugang mit sch√∂ner Box
            print("[bold blue]‚ïë[/bold blue]" + "[bold magenta]‚îå‚îÄ üì° F√úR ANDERE GER√ÑTE (Tablets, Handys, andere Computer) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê[/bold magenta]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + f"[bold magenta]‚îÇ[/bold magenta]   [bold yellow]üîó {network_url:<60}[/bold yellow] [bold magenta]‚îÇ[/bold magenta]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold magenta]‚îÇ[/bold magenta]   [dim]ü§ù Teile diese URL mit deinen Mitsch√ºlern und Lehrkr√§ften![/dim]             [bold magenta]‚îÇ[/bold magenta]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold magenta]‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò[/bold magenta]" + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            
            print("[bold blue]‚ï†" + "‚ïê"*88 + "‚ï£[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + "[bold yellow]üí° HILFREICHE TIPPS F√úR SCH√úLER:[/bold yellow]".center(98) + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]   [green]üñ±Ô∏è[/green]  Links sind anklickbar - einfach draufklicken!" + " "*42 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]   [green]üì±[/green]  Funktioniert perfekt auf Handys und Tablets" + " "*41 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]   [green]üë•[/green]  Mehrere Personen k√∂nnen gleichzeitig arbeiten" + " "*40 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]   [green]üîÑ[/green]  Bei Problemen: Internetverbindung pr√ºfen" + " "*45 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]   [green]üéì[/green]  Bei Fragen: Frage deine Lehrkraft oder Mitsch√ºler" + " "*37 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïë[/bold blue]" + " "*88 + "[bold blue]‚ïë[/bold blue]")
            print("[bold blue]‚ïö" + "‚ïê"*88 + "‚ïù[/bold blue]")
            
            print("\n[bold red]‚ö†Ô∏è  ZUM BEENDEN: Dr√ºcke STRG+C (Windows/Linux) oder CMD+C (Mac)[/bold red]")
            print("[dim]üöÄ Viel Spa√ü beim Programmieren und Experimentieren mit EduBotics![/dim]\n")

            uvicorn.run(
                "phosphobot.app:app",
                host=host,
                port=current_port,
                reload=reload,
                timeout_graceful_shutdown=1,
            )
            success = True
            break
        except OSError as e:
            if "address already in use" in str(e).lower():
                logger.warning(f"‚ö†Ô∏è Port-Konflikt auf {current_port}: {e}")
                continue
            logger.error(f"‚ùå Kritischer Server-Fehler: {e}")
            raise typer.Exit(code=1)
        except KeyboardInterrupt:
            print("\n" + "‚ïê"*60)
            print("[bold yellow]        üëã EDUBOTICS WIRD BEENDET[/bold yellow]")
            print("‚ïê"*60)
            print("\n[green]‚úÖ EduBotics wurde erfolgreich gestoppt![/green]")
            print("[dim]üí° Du kannst es jederzeit wieder mit 'edubotics run' starten[/dim]\n")
            raise typer.Exit(code=0)
        except CancelledError:
            print("\n[green]‚úÖ EduBotics wurde ordnungsgem√§√ü heruntergefahren.[/green]")
            raise typer.Exit(code=0)

    if not success:
        print("\n" + "‚ïê"*80)
        print("        ‚ùå FEHLER: EDUBOTICS KONNTE NICHT GESTARTET WERDEN")
        print("‚ïê"*80)
        
        print("\n[bold red]üòû Alle verf√ºgbaren Ports sind belegt![/bold red]")
        print("\n[bold yellow]üí° L√ñSUNGEN F√úR SCH√úLER:[/bold yellow]")
        
        print("\n[bold cyan]1. üîÑ Versuche einen anderen Port:[/bold cyan]")
        print("   [green]edubotics run --port 8000[/green]")
        print("   [dim]‚Ü≥ Dadurch wird ein anderer 'Eingang' f√ºr das Programm verwendet[/dim]")
        
        print("\n[bold cyan]2. üîç Pr√ºfe, ob EduBotics bereits l√§uft:[/bold cyan]")
        print("   [dim]‚Ü≥ Schaue im Task-Manager (Windows) nach 'edubotics' oder 'python'[/dim]")
        print("   [dim]‚Ü≥ Beende das alte Programm und starte neu[/dim]")
        
        print("\n[bold cyan]3. üíª Starte deinen Computer neu:[/bold cyan]")
        print("   [dim]‚Ü≥ Das behebt die meisten Port-Probleme[/dim]")
        
        print("\n[bold cyan]4. üÜò Hole dir Hilfe:[/bold cyan]")
        print("   [dim]‚Ü≥ Frage deine Lehrkraft oder einen Mitsch√ºler[/dim]")
        
        print("\n" + "‚ïê"*80 + "\n")
        raise typer.Exit(code=1)


if __name__ == "__main__":
    cli()